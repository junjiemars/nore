
# make


echo
echo "creating $NM_MAKEFILE"

mkdir -p $NM_OUT/bin \
         $NM_OUT/lib \
	       $NM_OUT/inc \
	       $NM_OUT/log \
	       $NM_OUT/pid \
	       $NM_OUT/tmp \
	       $NM_OUT/conf

asm_out="${auto_out:+$auto_out$NM_OUT/tmp/ }$asm_out"
bin_out="${auto_out:+$auto_out$NM_OUT/tmp/ }$bin_out"


for d in ${NM_SRC[@]}; do
  if [ -d $d ]; then
    NM_SRC=${d%/}
    break
  fi
done


cat << END > $NM_MAKEFILE
# $NM_MAKEFILE ($NM_COMPILER, $NM_PLATFORM)

CC = $CC
CPP = $CPP
CAS = $CAS
AS = $AS
AR = $AR
LINK = $LINK

CPPFLAGS = $CPPFLAGS
CFLAGS += $CFLAGS
ASFLAGS = $ASFLAGS
LDFLAGS += -L$NM_OUT/lib
LDLIBS = $LDLIBS
ARFLAGS = $ARFLAGS
LFLAGS = $LFLAGS
YFLAGS = $YFLAGS

INC += -I$NM_OUT -I$NM_OUT/inc

nm_symbol_opt = $nm_symbol_opt
nm_optimize_opt = $nm_optimize_opt
nm_warn_opt = $nm_warn_opt
nm_error_opt = $nm_error_opt
nm_debug_opt = $nm_debug_opt
nm_std_opt = $nm_std_opt
nm_cpu_opt = $nm_cpu_opt
nm_verbose_opt = $nm_verbose_opt

nm_pic_opt = $nm_pic_opt
nm_shared_opt = $nm_shared_opt

nm_stage_pre = $nm_stage_pre
nm_stage_chk = $nm_stage_chk
nm_stage_asm = $nm_stage_asm
nm_stage_c = $nm_stage_c

# macro define 
nm_def_opt = $nm_def_opt
nm_undef_opt = $nm_undef_opt

# path separator
nm_p = $nm_p

src_root = ${NM_SRC%/}/

# nore options
NM_SYMBOL = $NM_SYMBOL
NM_OPTIMIZE = $NM_OPTIMIZE
NM_WARN = $NM_WARN
NM_ERROR = $NM_ERROR
NM_DEBUG = $NM_DEBUG
NM_VERBOSE = $NM_VERBOSE
NM_STD = $NM_STD
NM_CPU = $NM_CPU

# platform
NM_SYSTEM = $NM_SYSTEM
NM_RELEASE = $NM_RELEASE
NM_MACHINE = $NM_MACHINE
CC_NAME = $CC_NAME
CC_VER = $CC_VER

# output option
cpp_out = $cpp_out
asm_out = $asm_out
obj_out = $obj_out
lib_out = $bin_out
ar_out = $ar_out
bin_out = $bin_out

# output extension
cpp_ext = $cpp_ext
asm_ext = $asm_ext
obj_ext = $obj_ext
lib_ext = $lib_ext
ar_ext = $ar_ext
bin_ext = $bin_ext


default: build

clean:
	\$(RM) -r $NM_OUT/bin/*
	\$(RM) -r $NM_OUT/lib/*
	\$(RM) -r $NM_OUT/inc/*
	\$(RM) -r $NM_OUT/log/*
	\$(RM) -r $NM_OUT/pid/*
	\$(RM) -r $NM_OUT/tmp/*
	\$(RM) -r $NM_OUT/conf/*


END


nm_sticks=()
nm_sticks_test=()


for opt in "${NM_HAS_STICKS[@]}"; do

	stick=`echo $opt \
				 | sed -e 's/\ *--has-\([a-zA-Z][a-zA-Z]*\)/\1/' \
				 | tr '[:upper:]' '[:lower:]'`

	if [ -d $NM_SRC/$stick ]; then
		nm_sticks+=($stick)
		nm_sticks_test+=(${stick}_test)
	else
		echo " + checking for $NM_SRC/$stick ... no found"
		cat << END >> $NM_AUTOCONF_ERR
---------------------------------------
checking for $NM_SRC/$stick ... no found

END

  fi

done




if [ -n "$nm_sticks" ]; then

	cat << END >> $NM_MAKEFILE

.PHONY: ${nm_sticks[@]} ${nm_sticks_test[@]}

build: ${nm_sticks[@]}

test: ${nm_sticks_test[@]}

inc_path=$NM_OUT/inc/
tmp_path=$NM_OUT/tmp/
lib_path=$NM_OUT/lib/
bin_path=$NM_OUT/bin/


END


	for stick in ${nm_sticks[@]}; do

		stick_src=$NM_SRC/$stick

    if [ -f $stick_src/version ]; then
			echo " + checking for $stick_src/version ... found"
      have=`echo $stick | tr '[:lower:]' '[:upper:]'`_VERSION \
      value=`cat $stick_src/version` . ${NM_HOME}auto/define
		fi
    
		if [ -f $stick_src/configure ]; then
			echo " + checking for $stick_src/configure ... found"
			. $stick_src/configure
		fi

		
		if [ -f $stick_src/Makefile.$CC_NAME ]; then
			stick_makefile=$stick_src/Makefile.$CC_NAME

		elif [ -f $stick_src/Makefile.$NM_SYSTEM ]; then
			stick_makefile=$stick_src/Makefile.$NM_SYSTEM

		elif [ -f $stick_src/Makefile ]; then
			stick_makefile=$stick_src/Makefile

		else

			echo " + checking for $stick_src/Makefile ... no found"
			cat << END >> $NM_AUTOCONF_ERR

----------------------------------------
checking for $stick_makefile no found

END

			break

		fi
		
		cat << END >> $NM_MAKEFILE
#---------------------------------------
${stick}_root := $stick_src/
include $stick_makefile

END

	done

fi
