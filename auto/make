
echo
echo "creating $NM_MAKEFILE"

mkdir -p $NM_OBJS/bin \
         $NM_OBJS/lib \
	       $NM_OBJS/inc \
	       $NM_OBJS/log \
	       $NM_OBJS/pid \
	       $NM_OBJS/tmp \
	       $NM_OBJS/conf

bin_out=${auto_out:+"$auto_out$NM_OBJS/tmp/ "}$bin_out

cat << END > $NM_MAKEFILE

CC = $CC
CPP = $CPP
CAS = $CAS
AS = $AS
LINK = $LINK

CPPFLAGS = $CPPFLAGS
CFLAGS = $CFLAGS
LFLAGS = $LFLAGS
LDFLAGS = $LDFLAGS
ASFLAGS = $ASFLAGS

LDLIBS = ${LDLIBS:+$LDLIBS }-L$NM_OBJS/lib

INC = ${INC:+$INC }-I$NM_OBJS -I$NM_OBJS/inc 

nm_symbol_opt = $nm_symbol_opt
nm_optimize_opt = $nm_optimize_opt
nm_warn_opt = $nm_warn_opt
nm_debug_opt = $nm_debug_opt
nm_verbose_opt = $nm_verbose_opt

nm_pic_opt = $nm_pic_opt
nm_cpu_opt = $nm_cpu_opt

# path sep
nm_p = $nm_p

src_root = ${NM_SRC%/}/

# nore options
NM_SYMBOL = $NM_SYMBOL
NM_OPTIMIZE = $NM_OPTIMIZE
NM_WARN = $NM_WARN
NM_DEBUG = $NM_DEBUG
NM_VERBOSE = $NM_VERBOSE

# platform
NM_SYSTEM = $NM_SYSTEM
NM_RELEASE = $NM_RELEASE
NM_MACHINE = $NM_MACHINE
CC_NAME = $CC_NAME

# output option
cpp_out = $cpp_out
asm_out = $asm_out
obj_out = $obj_out
bin_out = $bin_out

# output extension
cpp_ext = $cpp_ext
asm_ext = $asm_ext
obj_ext = $obj_ext
mod_ext = $mod_ext
bin_ext = $bin_ext


default: build

clean:
	\$(RM) -r $NM_OBJS/bin/*
	\$(RM) -r $NM_OBJS/lib/*
	\$(RM) -r $NM_OBJS/inc/*
	\$(RM) -r $NM_OBJS/log/*
	\$(RM) -r $NM_OBJS/pid/*
	\$(RM) -r $NM_OBJS/tmp/*
	\$(RM) -r $NM_OBJS/conf/*


END


nm_sticks=()
nm_sticks_test=()


for opt in "${NM_HAS_STICKS[@]}"; do

	stick=`echo $opt \
				 | sed -e 's/\ *--has-\([a-zA-Z][a-zA-Z]*\)/\1/' \
				 | tr [:upper:] [:lower:]`

	if [ -d $NM_SRC/$stick ]; then
		nm_sticks+=($stick)
		nm_sticks_test+=(${stick}_test)
	else
		echo " + checking for $NM_SRC/$stick ... no found"
		cat << END >> $NM_AUTOCONF_ERR
---------------------------------------
checking for $NM_SRC/$stick ... no found

END

  fi

done




if [ -n "$nm_sticks" ]; then

	cat << END >> $NM_MAKEFILE

.PHONY: ${nm_sticks[@]} ${nm_sticks_test[@]}

build: ${nm_sticks[@]}

test: ${nm_sticks_test[@]}


END
	
	for stick in ${nm_sticks[@]}; do

		stick_src=$NM_SRC/$stick

    if [ -f $stick_src/version ]; then
			echo " + checking for $stick_src/version ... found"
      have=`echo $stick | tr [:lower:] [:upper:]`_VERSION \
      value=`cat $stick_src/version` . ${NM_HOME}auto/define
		fi
    
		if [ -f $stick_src/configure ]; then
			echo " + checking for $stick_src/configure ... found"
			. $stick_src/configure
		fi

		src_path=$stick_src/
		inc_path=$NM_OBJS/inc/
		tmp_path=$NM_OBJS/tmp/
		lib_path=$NM_OBJS/lib/
		bin_path=$NM_OBJS/bin/
		
		if [ -f $stick_src/Makefile.$NM_SYSTEM ]; then
			stick_makefile=$stick_src/Makefile.$NM_SYSTEM

		elif [ -f $stick_src/Makefile ]; then
			stick_makefile=$stick_src/Makefile

		else

			echo " + checking for $stick_src/Makefile ... no found"
			cat << END >> $NM_AUTOCONF_ERR

----------------------------------------
checking for $stick_makefile no found

END

			break

		fi
		

		echo "#---------------------------------------" >> $NM_MAKEFILE
		echo $nm_n "`cat $stick_makefile`" \
			| sed -e "s@\$(src_path)@$src_path@g" \
					  -e "s@\$(inc_path)@$inc_path@g" \
						-e "s@\$(tmp_path)@$tmp_path@g" \
						-e "s@\$(lib_path)@$lib_path@g" \
						-e "s@\$(bin_path)@$bin_path@g" \
		>> $NM_MAKEFILE 
		echo >> $NM_MAKEFILE

	done

fi
