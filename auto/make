#### -*- mode:sh -*- vim:ft=sh
####
## No More than a C build system for clang, gcc and msvc.
## https://github.com/junjiemars/nore
####
## make
####


echo "creating $NM_MAKEFILE"

mkdir -p $NM_OUT/bin \
         $NM_OUT/etc \
         $NM_OUT/inc \
         $NM_OUT/lib \
         $NM_OUT/tmp \
         $NM_OUT/var

asm_out="${auto_out:+${auto_out}${NM_OUT}/tmp/ }$asm_out"
bin_out="${auto_out:+${auto_out}${NM_OUT}/tmp/ }$bin_out"


cat << END > $NM_MAKEFILE
# ${NM_MAKEFILE} (${NM_COMPILER}, ${NM_PLATFORM})
#
# ${gen_by_nore}
#
# GNU make Manual: https://www.gnu.org/software/make/manual/make.html
#

CC = $CC

CPP = $CPP
AS = $AS
AR = $AR
LD = $LD

# override make's predefined AS and LD
ASM = $ASM
LINK = $LINK


CPPFLAGS = $CPPFLAGS
ASFLAGS = $ASFLAGS
LDFLAGS = $LDFLAGS
LDLIBS = $LDLIBS
ARFLAGS = $ARFLAGS
LFLAGS = $LFLAGS
YFLAGS = $YFLAGS

CFLAGS = $CFLAGS

INC = $INC

nm_symbol_opt = $nm_symbol_opt
nm_warn_opt = $nm_warn_opt
nm_error_opt = $nm_error_opt
nm_build_opt = $nm_build_opt
nm_release_opt = $nm_release_opt
nm_std_opt = $nm_std_opt
nm_optimize_opt = $nm_optimize_opt
nm_arch_opt = $nm_arch_opt
nm_verbose_opt = $nm_verbose_opt


# feature
nm_model_opt = $nm_model_opt
nm_utf_opt = $nm_utf_opt
nm_trigraphs_opt = $nm_trigraphs_opt
nm_openmp_opt = $nm_openmp_opt

# stage
nm_stage_pre = $nm_stage_pre
nm_stage_chk = $nm_stage_chk
nm_stage_asm = $nm_stage_asm
nm_stage_c = $nm_stage_c

# macro define
nm_def_opt = $nm_def_opt
nm_undef_opt = $nm_undef_opt

# inc
nm_inc_opt = $nm_inc_opt

# lib
nm_shared_opt = $nm_shared_opt
nm_libdir_opt = $nm_libdir_opt
nm_lib_opt = $nm_lib_opt

# link
nm_link_opt = $nm_link_opt

# path separator
nm_path_sep = $nm_path_sep

# nore options
NM_SYMBOL = $NM_SYMBOL
NM_OPTIMIZE = $NM_OPTIMIZE
NM_WARN = $NM_WARN
NM_ERROR = $NM_ERROR
NM_BUILD = $NM_BUILD
NM_VERBOSE = $NM_VERBOSE
NM_STD = $NM_STD
NM_ARCH = $NM_ARCH

# platform
`symbol_value NM_SYSTEM` = $NM_SYSTEM
`symbol_value NM_RELEASE` = $NM_RELEASE
`symbol_value NM_MACHINE` = $NM_MACHINE

# compiler
`symbol_value CC_NAME` = $CC_NAME
`symbol_value CC_VER` = $CC_VER

# output option
cpp_out = $cpp_out
asm_out = $asm_out
obj_out = $obj_out
lib_out = $bin_out
ar_out = $ar_out
bin_out = $bin_out

# output extension
cpp_ext = $cpp_ext
asm_ext = $asm_ext
obj_ext = $obj_ext
lib_ext = $lib_ext
ar_ext = $ar_ext
bin_ext = $bin_ext


default: all

clean_bin_dir: $NM_OUT/bin
	-\$(RM) -r $NM_OUT/bin/*
clean_lib_dir: $NM_OUT/lib
	-\$(RM) -r $NM_OUT/lib/*
clean_inc_dir: $NM_OUT/inc
	-\$(RM) -r $NM_OUT/inc/*
clean_etc_dir: $NM_OUT/etc
	-\$(RM) -r $NM_OUT/etc/*
clean_var_dir: $NM_OUT/var
	-\$(RM) -r $NM_OUT/var/*
clean_tmp_dir: $NM_OUT/tmp
	-\$(RM) -r $NM_OUT/tmp/*

clean: clean_bin_dir \\
       clean_lib_dir \\
       clean_inc_dir \\
       clean_etc_dir \\
       clean_var_dir \\
       clean_tmp_dir


END


# make install targets
. ${NORE_ROOT}/auto/install


nm_sticks=
nm_sticks_build=
nm_sticks_test=
nm_stick_src=
nm_stick_norm=
nm_stick_make=


make_stick_path () {
  local src="$1"
  local stick="$2"
  if [ "." = "$stick" ]; then
    echo "$src"
  else
    echo "$src/$stick"
  fi
}

make_stick_norm () {
  local src="$1"
  local stick="$2"
  if [ "." = "$stick" ]; then
    if [ "." = "$src" ]; then
      echo "`basename \"$PWD\" | tr '[\t :=]' '_'`"
    else
      echo "`basename $src`"
    fi
  else
    echo "$stick"
  fi
}

echo_yes_or_no () {
  if [ 0 -eq $1 ]; then
    printf "yes\n"
  else
    printf "no\n"
  fi
}

echo_pretty_path () {
  echo "$@" | sed -e 's#^./\(.*\)#\1#'
}


# basic paths
cat << END >> $NM_MAKEFILE

#---------------------------------------

root = $NM_SRC
out = $NM_OUT

bin_path = $NM_OUT/bin
etc_path = $NM_OUT/etc
inc_path = $NM_OUT/inc
lib_path = $NM_OUT/lib
tmp_path = $NM_OUT/tmp
var_path = $NM_OUT/var

#---------------------------------------
END


for stick in ${NM_HAS_STICKS}; do

  nm_stick_src="`make_stick_path $NM_SRC $stick`"
  nm_stick_norm="`make_stick_norm $nm_stick_src $stick`"
  nm_stick_norm_c=

  if [ ! -d "$nm_stick_src" ]; then
    if [ YES = $NM_NEW ]; then
      printf " + generating $nm_stick_src directory ... "
      mkdir -p "$nm_stick_src"
      echo_yes_or_no $?
    else
      echo " + checking for $nm_stick_src ... no"
      cat << END >> $NM_AUTO_ERR

---------------------------------------
checking for $nm_stick_src ... no

END
      continue
    fi
  fi # end of [ ! -d $nm_stick_src ]

  nm_stick_norm_c="${nm_stick_norm}.c"

  if [ YES = $NM_NEW -a ! -f "$nm_stick_norm_c" ]; then
    printf " + generating `echo_pretty_path $nm_stick_src/$nm_stick_norm_c` file ... "

    cat <<END > "$nm_stick_src/$nm_stick_norm_c"
/*
 * ${gen_by_nore}
 *
*/

#include <nore.h>
#include <stdio.h>

int
main (void)
{
  printf ("Hello, Nore!\\n");
  return 0;
}
END

  echo_yes_or_no $?
  fi # end of [ ! -f "$nm_stick_src/$nm_stick_norm_c" ]

  if [ -f "$nm_stick_src/version" ]; then
    echo " * checking for `echo_pretty_path $nm_stick_src/version` ... yes"
    have=`echo "$nm_stick_norm" | tr '[:lower:]' '[:upper:]'`_VERSION \
    value=`cat "$nm_stick_src/version"` . ${NORE_ROOT}/auto/define

  elif [ YES = $NM_NEW ]; then
    printf " + generating `echo_pretty_path $nm_stick_src/version` file ... "
    cat << END > "$nm_stick_src/version"
0x030614

END
  echo_yes_or_no $?
  fi # end of [ -f $nm_stick_src/version ]

  if [ -f "$nm_stick_src/auto" ]; then
    echo " * checking for `echo_pretty_path $nm_stick_src/auto` ... yes"
    . "$nm_stick_src/auto" 2>> $NM_AUTO_ERR

  elif [ YES = $NM_NEW ]; then
    printf " + generating `echo_pretty_path $nm_stick_src/auto` file ... "
    cat ${NORE_ROOT}/auto/check > "$nm_stick_src/auto"
    echo_yes_or_no $?
  else
    echo " * checking for `echo_pretty_path $nm_stick_src/auto` ... no"
  fi # end of [ -f $nm_stick_src/auto ]

  if [ -f "$nm_stick_src/Makefile" ]; then
    stick_makefile="$nm_stick_src/Makefile"
    echo " * checking for `echo_pretty_path $nm_stick_src/Makefile` ... yes"

  elif [ YES = $NM_NEW ]; then
    stick_makefile="$nm_stick_src/Makefile"
    if [ $nm_stick_src = . ]; then
      stick_makefile="$nm_stick_src/Makefile.NEW"
    else
      printf " + generating `echo_pretty_path $nm_stick_src/Makefile` ... "
    fi
    cat << END > "$stick_makefile"
#---------------------------------------

${nm_stick_norm}_root := $nm_stick_src

${nm_stick_norm}_binout := \$(bin_path)/${nm_stick_norm}\$(bin_ext)

${nm_stick_norm}: \$(${nm_stick_norm}_binout)
${nm_stick_norm}_test: ${nm_stick_norm}
	\$(${nm_stick_norm}_binout)

\$(${nm_stick_norm}_binout): \$(${nm_stick_norm}_root)/${nm_stick_norm_c}
	\$(CC) \$(CFLAGS) \$(INC) \$^ \$(bin_out)\$@

END
    if [ $nm_stick_src != . ]; then
      echo_yes_or_no $?
    fi
  else

    echo " * checking for `echo_pretty_path $nm_stick_src/Makefile` ... no"
    cat << END >> $NM_AUTO_ERR

----------------------------------------
checking for ${nm_stick_src}/Makefile ... no

END
    continue
  fi # end of [ -f $nm_stick_src/Makefile ]

  nm_sticks="$nm_stick $stick"
  nm_sticks_build="$nm_sticks_build $nm_stick_norm"
  nm_sticks_test="$nm_sticks_test ${nm_stick_norm}_test"

  if [ $nm_stick_src != . -a -n "$stick_makefile" ]; then
    cat << END >> $NM_MAKEFILE

${nm_stick_norm}_root := $nm_stick_src

include $stick_makefile

#---------------------------------------
END
  fi # end of [ -n $stick_makefile ]

done # end of for loop sticks


if [ 0 -lt ${#nm_sticks} ]; then

  cat << END >> $NM_MAKEFILE

all: ${nm_sticks_build}
test: ${nm_sticks_test}


.PHONY: default all clean test task install \\
        ${nm_sticks_build} ${nm_sticks_test}

#---------------------------------------

#eof
END

fi


# create root Makefile
if [ ! -f Makefile ]; then
  printf " + generating Makefile file ... "
  cat << END > Makefile
# Makefile
#
# ${gen_by_nore}
#
# check ${NM_MAKEFILE} for details

include $NM_MAKEFILE

END

  if [ -f "$nm_stick_src/Makefile.NEW" ]; then
    cat "$nm_stick_src/Makefile.NEW" >> Makefile
    rm "$nm_stick_src/Makefile.NEW"
  fi
  echo_yes_or_no $?

fi # end of [ -f Makefile ]


# eof
