
# bash support associated array
NM_ASSOCIATED_ARRAY_P=0
if [ 4 -le ${BASH_VERSINFO[0]} ]; then
	NM_ASSOCIATED_ARRAY_P=1
fi

# builtin symbol table
if [ 0 -lt $NM_ASSOCIATED_ARRAY_P ]; then
	declare -A NM_SYMBOL_TABLE=(
		[WINNT]=WINNT
		[LINUX]=LINUX
		[DARWIN]=DARWIN
		[MSVC]=MSVC
		[GCC]=GCC
		[CLANG]=CLANG
		[NM_CPU_CACHE_LINE]=NM_CPU_CACHE_LINE
	)
else
	declare -a NM_SYMBOL_TABLE_NAME=(
		WINNT
		LINUX
		DARWIN
		MSVC
		GCC
		CLANG
		NM_CPU_CACHE_LINE
	)
	declare -a NM_SYMBOL_TABLE_VAL=($NM_SYMBOL_TABLE_NAME)
	
fi

load_symbol_table() {
	local sf="$1"
	local line=

	while IFS='' read -r line || [[ -n "$line" ]]; do
		IFS=':'; local kv=(${line//; }); unset IFS

		if [ 0 -lt $NM_ASSOCIATED_ARRAY_P ]; then
			NM_SYMBOL_TABLE[${kv[0]}]=${kv[1]}
		else
			for i in "${!NM_SYMBOL_TABLE_NAME[@]}"; do
				if [ "${kv[0]}" = "${NM_SYMBOL_TABLE_NAME[$i]}" ]; then
					${NM_SYMBOL_TABLE_VAL[$i]}=${kv[1]}
					continue
				fi
			done
		fi

	done < "$sf"
}

dump_symbol_table() {
	local df="$1"
	echo $nm_n > "$df"

	if [ 0 -lt $NM_ASSOCIATED_ARRAY_P ]; then
		for k in "${!NM_SYMBOL_TABLE[@]}"; do
			echo "$k:${NM_SYMBOL_TABLE[$k]}" >> "$df"			
		done
	else
		for i in "${!NM_SYMBOL_TABLE_NAME[@]}"; do
			echo "${NM_SYMBOL_TABLE_NAME[$i]}:${NM_SYMBOL_TABLE_VAL[$i]}"
		done
	fi
}

symbol_value() {
	local n="$1"
	if [ 0 -lt $NM_ASSOCIATED_ARRAY_P ]; then
		echo "${NM_SYMBOL_TABLE[$n]}"
	else
		for i in "${NM_SYMBOL_TABLE_NAME[@]}"; do
			if [ "$n" = "${NM_SYMBOL_TABLE_NAME[$i]}" ]; then
				echo "${NM_SYMBOL_TABLE_VAL[$i]}"
			fi
		done
		echo "$n"
	fi
}


