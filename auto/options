#### -*- mode:sh -*- vim:ft=sh
####
## No More than a C build system for clang, gcc and msvc.
## https://github.com/junjiemars/nore
####
## options
####


help=no
gen_by_nore="generated by Nore (https://github.com/junjiemars/nore)"

NM_SYMBOL_FILE=

NM_PREFIX=

NM_BIN_PATH=
NM_LIB_PATH=
NM_INC_PATH=
NM_ETC_PATH=
NM_VAR_PATH=

NM_OUT=out
NM_SRC=.

NM_NEW=NO

NM_ERROR=YES
NM_WARN=YES
NM_VERBOSE=NO
NM_BUILD=NO
NM_SYMBOL=YES
NM_ARCH=NO
NM_STD=YES
NM_OPTIMIZE=NO

NM_PLATFORM=
NM_CPU_CACHE_LINE=
NM_HAS_STICKS=


legal_dir_reg='^[a-zA-Z_/][a-zA-Z_0-9/]*$'
legal_opt_reg='[a-zA-Z_][a-zA-Z_0-9]*$'

legal_dir () {
	echo "$@" | grep -q "${legal_dir_reg}"
}

panic_arg () {
	echo "! panic: invalid argument ${1}'${@:2}'"
	echo "  ${1} should be '${legal_dir_reg}'"
	exit 1
}

legal_opt () {
	echo "$@" | grep -q "\-\-has-${legal_opt_reg}"
}

panic_has_opt () {
  echo "! panic: invalid option '$@'"
	echo "  --has-* where * should be '${legal_opt_reg}'"
	exit 1
}


for option
do
  opt="$opt `echo $option | sed -e \"s/\(--[^=]*=\)\(.* .*\)/\1'\2'/\"`"
  
  case "$option" in
    -*=*) value=`echo "$option" | sed -e 's/[-_a-zA-Z0-9]*=//'` ;;
    *) value="" ;;
  esac
  
  case "$option" in
    --help) help=yes ;;
		
    --symbol-table=*) legal_dir "$value" \
			&& NM_SYMBOL_FILE="${value%/}" || panic_arg "--symbol-table="	"$value"
			;;
    --prefix=*) legal_dir "$value" \
			&& NM_PREFIX="${value%/}" || panic_arg "--prefix=" "$value"
			;;
    --src-dir=*) legal_dir "$value" \
			&& NM_SRC="${value%/}" || panic_arg "--src-dir=" "$value"
			;;
    --out-dir=*) legal_dir "$value" \
			&& NM_OUT="${value%/}" || panic_arg "--out-dir=" "$value"
			;;

    --new)                   NM_NEW=YES                   ;;

		--with-error=*)          NM_ERROR="$value"     	      ;;
		--with-warn=*)           NM_WARN="$value"            	;;
		--with-verbose=*)        NM_VERBOSE="$value"         	;;
		--with-release=*)        NM_BUILD="$value"           	;;
		--with-symbol=*)         NM_SYMBOL="$value"          	;;
    --with-arch=*)           NM_ARCH="$value"             ;;
		--with-std=*)            NM_STD="$value"            	;;
		--with-optimize=*)       NM_OPTIMIZE="$value"        	;;

		--has-*)
			if `legal_opt "$option"`; then
				NM_HAS_STICKS="${NM_HAS_STICKS:+$NM_HAS_STICKS }`echo $option|sed -e s/\ *--has-\(${legal_opt_reg}\)/\1/|tr '[:upper:]' '[:lower:]'`"
			else
				panic_has_opt "$option"
			fi
			;;
    
    *)
			echo "! panic: unkown option '$option'"
			exit 1
			;;
  esac
done


if [ $help = yes ]; then
	cat << END
usage: configure [command]
       configure [options...]

commands:
  clone                              clone Nore to current directory
  upgrade                            upgrade Nore
  where                              where Nore located
  trace                              trace Nore

options:
  --help                             print this message
  --symbol-table=PATH                dump or load symbol table
  --prefix=PATH                      installation prefix
  --src-dir=[.|src|*]                set source directory
  --out-dir=[out|*]                  set build out directory
  --new                              generate Nore script templates
  --with-error=[YES|NO]              treat warn as error
  --with-warn=[YES|NO|*]             warn level option
  --with-verbose=[NO|YES]            verbose output
  --with-release=[NO|YES]            build for release
  --with-symbol=[YES|NO|*]           generate debug symbols
  --with-arch=[NO|YES|*]             arch option
  --with-std=[YES|NO|*]              language standard option
  --with-optimize=[NO|YES|*]         optimize level option
  --has-*                            has [*] to do

END
  exit 1
fi


yes_no_opt () {
  local d="$1"
  local v="${@:2}"
  local u="`echo $v | tr [:lower:] [:upper:]`"

  if [ -z "$v" ]; then
    echo "$d"
  elif [ "YES" = "$u" -o "NO" = "$u" ]; then
    echo "$u"
  else
    echo "$v"
  fi
}


NM_CONFIGURE="$opt"

if [ . = "$NM_SRC" -a -d src ]; then
	NM_SRC=src
fi

if [ 0 -eq ${#NM_HAS_STICKS} ]; then
  NM_HAS_STICKS="."
fi

NM_ERROR="`yes_no_opt YES $NM_ERROR`"
NM_WARN="`yes_no_opt YES $NM_WARN`"
NM_VERBOSE="`yes_no_opt NO $NM_VERBOSE`"
NM_BUILD="`yes_no_opt NO $NM_BUILD`"
NM_SYMBOL="`yes_no_opt YES $NM_SYMBOL`"
NM_ARCH="`yes_no_opt NO $NM_ARCH`"
NM_STD="`yes_no_opt YES $NM_STD`"
NM_OPTIMIZE="`yes_no_opt NO $NM_OPTIMIZE`"

NM_BIN_PATH="${NM_BIN_PATH:-bin}"
NM_LIB_PATH="${NM_LIB_PATH:-lib}"
NM_ETC_PATH="${NM_ETC_PATH:-etc}"
NM_INC_PATH="${NM_INC_PATH:-include}"
NM_VAR_PATH="${NM_VAR_PATH:-var}"


# eof
