
help=no

NM_PREFIX=

NM_BIN_PATH=
NM_LIB_PATH=
NM_INC_PATH=
NM_ETC_PATH=
NM_VAR_PATH=

NM_OUT=out
NM_SRC=src

NM_CROSS_BUILD=NO

NM_NEW=NO

NM_SYMBOL=YES
NM_OPTIMIZE=NO
NM_WARN=YES
NM_ERROR=YES
NM_DEBUG=YES
NM_VERBOSE=NO
NM_STD=YES
NM_CPU=NO

NM_PLATFORM=

NM_CPU_CACHE_LINE=

NM_HAS_STICKS=()


for option
do
  opt="$opt `echo $option | sed -e \"s/\(--[^=]*=\)\(.* .*\)/\1'\2'/\"`"
  
  case "$option" in
    -*=*) value=`echo "$option" | sed -e 's/[-_a-zA-Z0-9]*=//'` ;;
    *) value="" ;;
  esac
  
  case "$option" in
    --help)                          help=yes                   	;;
    
    --prefix=*)                      NM_PREFIX="${value%/}"      	;;
    --bin-path=*)                    NM_BIN_PATH="${value%/}"     ;;
    --lib-path=*)                    NM_LIB_PATH="${value%/}"  		;;
    --inc-path=*)                    NM_INC_PATH="${value%/}"     ;;
    --etc-path=*)                    NM_ETC_PATH="${value%/}"     ;;
    --var-path=*)                    NM_VAR_PATH="${value%/}"     ;;

    --src-dir=*)                     NM_SRC="${value%/}"         	;;
    --out-dir=*)                     NM_OUT="${value%/}"       	  ;;

    --cross-build=*)                 NM_CROSS_BUILD="$value"     	;;

    --new=*)                         NM_NEW="$value"              ;;

		--without-symbol)                NM_SYMBOL=NO               	;;
		--without-debug)                 NM_DEBUG=NO                	;;
		--without-error)                 NM_ERROR=NO         	        ;;
		--with-warn=*)                   NM_WARN="$value"            	;;
		--with-optimize=*)               NM_OPTIMIZE="$value"        	;;
		--with-std=*)                    NM_STD="$value"            	;;
    --with-cpu=*)                    NM_CPU="$value"              ;;
		--with-verbose)                  NM_VERBOSE=YES             	;;

		--has-*)
      NM_HAS_STICKS+=(`echo $option \
				| sed -e 's/\ *--has-\([a-zA-Z][a-zA-Z]*\)/\1/' \
				| tr '[:upper:]' '[:lower:]'`
      )
    ;;
    
    *)
      echo "$0: error: invalid option \"$option\""
      exit 1
    ;;
  esac
done


NM_CONFIGURE="$opt"


if [ $help = yes ]; then


cat << END

  --help                             print this message

  --prefix=PATH                      set installation prefix
  --bin-path=PATH                    set bin pathname 
  --lib-path=PATH                    set lib pathname
  --inc-path=PATH                    set include pathname
  --etc-path=PATH                    set etc pathname
  --var-path=PATH                    set var pathname

  --src-dir=DIR                      set source directory
  --out-dir=DIR                      set build out directory

  --cross-build=[YES|NO]             set cross build option

  --new=[NO|YES]                     generate Nore script templates

  --without-symbol                   disable CC generate debug symbols
  --without-debug                    enable build for release
  --without-error                    disable warn as error
  --with-warn=[YES|NO|*]             set CC warn level option 
  --with-optimize=[NO|YES|*]         set CC optimize level option 
  --with-std=[YES|NO|*]              set CC std option 
  --with-cpu=[NO|*]                  set cpu option 
  --with-verbose                     enable verbose build option

  --has-*                            has [*] to do

END

  exit 1

fi


if [ -z "$NM_NEW" ]; then
  NM_NEW=NO
fi

if [ 0 -eq ${#NM_HAS_STICKS} ]; then
  NM_HAS_STICKS+=(".")
fi

if [ -z "$NM_CPU" ]; then
	NM_CPU=NO
fi

if [ -z "$NM_WARN" ]; then
	NM_WARN=YES
fi

if [ -z "$NM_OPTIMIZE" ]; then
	NM_OPTIMIZE=NO
fi

if [ -z "$NM_STD" ]; then
	NM_STD=YES
fi


NM_BIN_PATH=${NM_BIN_PATH:-bin}
NM_LIB_PATH=${NM_LIB_PATH:-lib}
NM_ETC_PATH=${NM_ETC_PATH:-etc}
NM_INC_PATH=${NM_INC_PATH:-include}
NM_VAR_PATH=${NM_VAR_PATH:-var}

