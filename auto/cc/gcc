
# gcc

NM_GCC_VER=`$CC -v 2>&1 | grep 'gcc version' 2>&1 \
                        | sed -e 's/^.* version \(.*\)/\1/'`

echo " + gcc version: $NM_GCC_VER"

NM_COMPILER="gcc $NM_GCC_VER" 
have=NM_COMPILER value="\"gcc $NM_GCC_VER\"" . ${NM_HOME}auto/define

# std
#nm_std_c99_ver="`gcc -std=c99 -dM -E - </dev/null | grep '__STDC_VERSION__' 2>&1 | cut -d' ' -f3`"

# preprocess
[ "." = ".$CPP" ] && CPP="\$(CC)"

# assembly
[ "." = ".$CAS" ] && CAS="\$(CC)"

# assembler
[ "." = ".$AS" ] && AS="\$(CC)"

# archive
[ "." = ".$AR" ] && AR="ar"


# optimization
nm_optimize_opt=${nm_optimize_opt:-"-O2"}

# debug
nm_symbol_opt=${nm_symbol_opt:-"-g"}

# warning
nm_warn_opt=${nm_warn_opt:-"-Wall -Wpointer-arith -Wunused-variable"}

# error
nm_error_opt="-Werror"

# verbose
nm_verbose_opt=${nm_verbose_opt:-"-v"}

# pic
nm_pic_opt=


nm_feature="gcc -pipe switch"
nm_feature_name=
nm_feature_run=no
nm_feature_incs=
nm_feature_path=
nm_feature_libs=
nm_feature_test=
nm_feature_flags=-pipe
. ${NM_HOME}auto/feature


if [ $nm_found = yes ]; then
	nm_pic_opt=-fPIC
fi


# cpu
case "$NM_CPU" in

	NO)
	;;

	-march=*)
		nm_feature_flags="$NM_CPU"
	;;

	*)
		nm_feature_flags="-march=$NM_CPU"
	;;

esac


if [ "$NM_CPU" != "NO" ]; then
	nm_feature="$CC_NAME $nm_feature_flags switch"
	nm_feature_name="nm_have$nm_feature_flags"
	nm_feature_run=no
	nm_feature_incs=
	nm_feature_path=
	nm_feature_libs=
	nm_feature_test=
	. ${NM_HOME}auto/feature
	
	if [ $nm_found = yes ]; then
		nm_cpu_opt=$nm_feature_flags
		CFLAGS=${CFLAGS:+$CFLAGS}${nm_cpu_opt:+ $nm_cpu_opt}
	fi

fi


# warnings

case "$NM_GCC_VER" in
  *)
    nm_warn_opt="${nm_warn_opt:+$nm_warn_opt }-Wunused-parameter"
    ;;
esac


# stage
nm_stage_pre="-E"
nm_stage_chk=
nm_stage_asm="-S"
nm_stage_c="-c"

# std 
case "$NM_STD" in
	NO)
	;;

	YES)
		nm_feature_flags="-std=c99"
	;;

	*)
		case "$NM_STD" in
			[cC]89|[cC]90|[cC]99|[cC]11)
				nm_feature_flags="-std=`echo $NM_STD | tr '[:upper:]' '[:lower:]'`"
				;;
			*)
				nm_feature_flags=$NM_STD
				;;
		esac
	;;

esac


if [ "$NM_STD" != "NO" ]; then
	nm_feature="$CC_NAME $nm_feature_flags switch"
	nm_feature_name="nm_have$nm_feature_flags"
	nm_feature_run=no
	nm_feature_incs=
	nm_feature_path=
	nm_feature_libs=
	nm_feature_test=
	. ${NM_HOME}auto/feature
	
	if [ $nm_found = yes ]; then
		nm_std_opt=$nm_feature_flags
		CFLAGS=${CFLAGS:+$CFLAGS}${nm_std_opt:+ $nm_std_opt}
	fi

fi
