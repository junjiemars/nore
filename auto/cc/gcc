
# gcc

NM_GCC_VER=`$CC -v 2>&1 | grep 'gcc version' 2>&1 \
                        | sed -e 's/^.* version \(.*\)/\1/'`

echo " + gcc version: $NM_GCC_VER"

have=NM_COMPILER value="\"gcc $NM_GCC_VER\"" . ${NM_HOME}auto/define

# std
#nm_std_c99_ver="`gcc -std=c99 -dM -E - </dev/null | grep '__STDC_VERSION__' 2>&1 | cut -d' ' -f3`"

# preprocess
[ "." = ".$CPP" ] && CPP="\$(CC)"

# assembly
[ "." = ".$CAS" ] && CAS="\$(CC)"

# assembler
[ "." = ".$AS" ] && AS="\$(CC)"


# optimization
nm_optimize_opt=${nm_optimize_opt:-"-O2"}

# debug
nm_symbol_opt=${nm_symbol_opt:-"-g"}

# warning
nm_warn_opt=${nm_warn_opt:-"-Wall -Wpointer-arith -Wunused-variable"}

# error
nm_error_opt="-Werror"

# verbose
nm_verbose_opt=${nm_verbose_opt:-"-v"}

# pic
nm_pic_opt=${nm_pic_opt:-"-fPIC"}

# cpu/arch
nm_cpu_opt=


nm_feature="gcc -pipe switch"
nm_feature_name=
nm_feature_run=no
nm_feature_incs=
nm_feature_path=
nm_feature_libs=
nm_feature_test=
. ${NM_HOME}auto/feature

CC_TEST_FLAGS=

if [ $nm_found = yes ]; then
	CC_TEST_FLAGS="-pipe"
fi


case "$NM_MACHINE" in

  sun4u | sun4v | sparc | sparc64 )
    # "-mcpu=v9" enables the "casa" assembler instruction
		nm_cpu_opt="${nm_cpu_opt:+$nm_cpu_opt }-mcpu=v9"
  ;;

esac


case $CPU in
  pentium)
    # optimize for Pentium and Athlon
		nm_cpu_opt="${nm_cpu_opt:+$nm_cpu_opt }-march=pentium"
    NM_CPU_CACHE_LINE=32
  ;;

  pentiumpro | pentium3)
    # optimize for Pentium Pro, Pentium II and Pentium III
		nm_cpu_opt="${nm_cpu_opt:+$nm_cpu_opt }-march=pentiumpro"
    NM_CPU_CACHE_LINE=32
  ;;

  pentium4)
    # optimize for Pentium 4, gcc 3.x
		nm_cpu_opt="${nm_cpu_opt:+$nm_cpu_opt }-march=pentium4"
    NM_CPU_CACHE_LINE=128
  ;;

  athlon)
    # optimize for Athlon, gcc 3.x
		nm_cpu_opt="${nm_cpu_opt:+$nm_cpu_opt }-march=athlon"
    NM_CPU_CACHE_LINE=64
  ;;

  opteron)
    # optimize for Opteron, gcc 3.x
		nm_cpu_opt="${nm_cpu_opt:+$nm_cpu_opt }-march=opteron"
    NM_CPU_CACHE_LINE=64
  ;;

  sparc32)
    # build 32-bit UltraSparc binary
		nm_cpu_opt="${nm_cpu_opt:+$nm_cpu_opt }-m32"
    CORE_LINK="$CORE_LINK -m32"
    NM_CPU_CACHE_LINE=64
  ;;

  sparc64)
    # build 64-bit UltraSparc binary
		nm_cpu_opt="${nm_cpu_opt:+$nm_cpu_opt }-m64"
    CORE_LINK="$CORE_LINK -m64"
    NM_CPU_CACHE_LINE=64
  ;;

   ppc64)
    # build 64-bit PowerPC binary
		nm_cpu_opt="${nm_cpu_opt:+$nm_cpu_opt }-m64"
		nm_cpu_opt="${nm_cpu_opt:+$nm_cpu_opt }-falign-functions=32 -falign-labels=32"
		nm_cpu_opt="${nm_cpu_opt:+$nm_cpu_opt }-falign-loops=32 -falign-jumps=32"
    CORE_LINK="$CORE_LINK -m64"
    NM_CPU_CACHE_LINE=128
  ;;

esac


case "$NM_GCC_VER" in
  2.7*)
    # batch build
		nm_cpu_opt=
  ;;
esac


CC_TEST_FLAGS="${CC_TEST_FLAGS:+$CC_TEST_FLAGS }$nm_cpu_opt"


# warnings

case "$NM_GCC_VER" in
  *)
    nm_warn_opt="${nm_warn_opt:+$nm_warn_opt }-Wunused-parameter"
    ;;
esac


# stage
nm_stage_pre="-E"
nm_stage_chk=
nm_stage_asm="-S"
nm_stage_c="-c"
