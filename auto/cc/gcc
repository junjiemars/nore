
# gcc

nm_gcc_ver=`$CC -v 2>&1 | grep 'gcc version' 2>&1 \
                        | sed -e 's/^.* version \(.*\)/\1/'`

echo " + gcc version: $nm_gcc_ver"

NM_COMPILER="gcc $nm_gcc_ver"
have=NM_COMPILER value="\"$NM_COMPILER\"" . ${NM_HOME}auto/define

. ${NM_HOME}auto/cc/version
CC_VER=`version_n $(echo $nm_gcc_ver | cut -d' ' -f1)`
have=GCC value=$CC_VER . ${NM_HOME}auto/define


# compiler 
[ "." = ".$CC" ] && CC="cc"

# preprocess
[ "." = ".$CPP" ] && CPP="\$(CC)"

# assembly
[ "." = ".$CAS" ] && CAS="\$(CC)"

# assembler
[ "." = ".$AS" ] && AS="\$(CC)"

# archive
[ "." = ".$AR" ] && AR="ar"


# std
std_opt='-std=' . ${NM_HOME}auto/cc/std

# optimization
nm_optimize_opt=${nm_optimize_opt:-"-O2"}

# debug
nm_symbol_opt=${nm_symbol_opt:-"-g"}

# warning
nm_warn_opt=${nm_warn_opt:-"-Wall -Wextra"}

# error
nm_error_opt="-Werror"

# verbose
nm_verbose_opt=${nm_verbose_opt:-"-v"}

# pic
nm_pic_opt=


nm_feature="gcc -pipe switch"
nm_feature_name=
nm_feature_run=no
nm_feature_h=
nm_feature_flags=-pipe
nm_feature_inc=
nm_feature_ldlibs=
nm_feature_test=
. ${NM_HOME}auto/feature


if [ $nm_found = yes ]; then
	nm_pic_opt=-fPIC
fi


# stage
nm_stage_pre="-E"
nm_stage_chk=
nm_stage_asm="-S"
nm_stage_c="-c"


# cpu
cpu_opt='-march=' . ${NM_HOME}auto/cc/cpu
