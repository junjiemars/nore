
# clang

NM_CLANG_VER=`$CC -v 2>&1 | grep '\(clang\|LLVM\) version' 2>&1 \
                          | sed -e 's/^.* version \(.*\)/\1/'`

echo " + clang version: $NM_CLANG_VER"

have=NM_COMPILER value="\"clang $NM_CLANG_VER\"" . ${NM_HOME}auto/define

# preprocess
[ "." = ".$CPP" ] && CPP="\$(CC)"

# assembly
[ "." = ".$CAS" ] && CAS="\$(CC)"

# assembler
[ "." = ".$AS" ] && AS="\$(CC)"


# optimizations
nm_optimize_opt=${nm_optimize_opt:-"-O2"}

# symbol 
nm_symbol_opt=${nm_symbol_opt:-"-g"}

# error
nm_error_opt="-Werror"

# warnings
nm_warn_opt=${nm_warn_opt:-"-Wall -Wextra -Wpointer-arith -Wconditional-uninitialized -Wunused-variable -Wunused-parameter -Wno-error=unused-command-line-argument"}

# verbose
nm_verbose_opt=${nm_verbose_opt:-"-v"}

# stage
nm_stage_pre="-E"
nm_stage_chk="-fsyntax-only"
nm_stage_asm="-S"
nm_stage_c="-c"


# std 
case "$NM_STD" in
	YES)
		nm_feature_flags="-std=c99"
		nm_feature="$CC_NAME $nm_feature_flags switch"
		nm_feature_name=nm_have_${CC_NAME}_std_c99
		nm_std_opt_name="_STD_C99"
		;;
	NO)
		;;
	*)
		case "$NM_STD" in
			[cC]89|[cC]90|[cC]99|[cC]11)
				NM_STD="-std=`echo $NM_STD | tr [:upper:] [:lower:]`"
				;;
		esac
		nm_feature_flags=$NM_STD
		nm_feature="$CC_NAME $nm_feature_flags switch"
		nm_std_opt_name="`echo $NM_STD | tr '[-: =]' '_' | tr [:lower:] [:upper:]`"
		nm_feature_name=nm_have_${CC_NAME}${nm_std_opt_name}
		;;
esac

if [ "$NM_STD" != "NO" ]; then
	nm_feature_run=no
	nm_feature_incs=
	nm_feature_path=
	nm_feature_libs=
	nm_feature_test=
	. ${NM_HOME}auto/feature
	
	if [ $nm_found = yes ]; then
		nm_std_opt=$nm_feature_flags
		CFLAGS=${CFLAGS:+$CFLAGS}${nm_std_opt:+ $nm_std_opt}
	fi
fi
