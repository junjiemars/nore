
# clang

nm_clang_ver=`$CC -v 2>&1 | grep '\(clang\|LLVM\) version' 2>&1 \
                          | sed -e 's/^.* version \(.*\)/\1/'`

echo " + clang version: $nm_clang_ver"

NM_COMPILER="clang $nm_clang_ver"
have=NM_COMPILER value="\"$NM_COMPILER\"" . ${NM_HOME}auto/define

. ${NM_HOME}auto/cc/version
CC_VER=`version_n $(echo $nm_clang_ver | cut -d' ' -f1)`
have=CLANG value=$CC_VER . ${NM_HOME}auto/define


# compiler 
[ "." = ".$CC" ] && CC="cc"

# preprocess
[ "." = ".$CPP" ] && CPP="\$(CC)"

# assembly
[ "." = ".$CAS" ] && CAS="\$(CC)"

# assembler
[ "." = ".$AS" ] && AS="\$(CC)"

# archive
[ "." = ".$AR" ] && AR="ar"


# optimizations
nm_optimize_opt=${nm_optimize_opt:-"-O2"}

# symbol 
nm_symbol_opt=${nm_symbol_opt:-"-g"}

# error
nm_error_opt="-Werror"

# warnings
nm_warn_opt=${nm_warn_opt:-"-Weverything"}

# verbose
nm_verbose_opt=${nm_verbose_opt:-"-v"}

# stage
nm_stage_pre="-E"
nm_stage_chk="-fsyntax-only"
nm_stage_asm="-S"
nm_stage_c="-c"


# std 
case "$NM_STD" in
	NO) ;;

	YES) nm_feature_flags="-std=c99" ;;

	*)
		case "$NM_STD" in
			[cC]89|[cC]90|[cC]99|[cC]11)
				nm_feature_flags="-std=`echo $NM_STD | tr '[:upper:]' '[:lower:]'`"
				;;
			*)
				nm_feature_flags=$NM_STD
				;;
		esac
	;;

esac

if [ "$NM_STD" != "NO" ]; then

	nm_feature="$CC_NAME $nm_feature_flags switch"
	nm_feature_name="nm_have$nm_feature_flags"
	nm_feature_run=no
	nm_feature_h=
	nm_feature_inc=
	nm_feature_ldlibs=
	nm_feature_test=
	. ${NM_HOME}auto/feature
	
	if [ $nm_found = yes ]; then
		nm_std_opt=$nm_feature_flags
		CFLAGS=${CFLAGS:+$CFLAGS}${nm_std_opt:+ $nm_std_opt}
	fi

fi


# cpu
case "$NM_CPU" in
	NO) ;;

	-march=*)
		nm_feature_flags="$NM_CPU"
	;;

	*)
		nm_feature_flags="-march=$NM_CPU"
	;;

esac

if [ "$NM_CPU" != "NO" ]; then

	nm_feature="$CC_NAME $nm_feature_flags switch"
	nm_feature_name="nm_have_cpu$nm_feature_flags"
	nm_feature_run=no
	nm_feature_h=
	nm_feature_inc=
	nm_feature_ldlibs=
	nm_feature_test=
	. ${NM_HOME}auto/feature
	
	if [ $nm_found = yes ]; then
		nm_cpu_opt=$nm_feature_flags
		CFLAGS=${CFLAGS:+$CFLAGS}${nm_cpu_opt:+ $nm_cpu_opt}
	fi

fi
