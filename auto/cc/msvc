
# msvc


LDFLAGS=${LDFLAGS:-"-LD"}


# optimize: -Og -Oi -Ot -Oy -Ob2 -Gs -GF -Gy
nm_optimize_opt=${nm_optimize_opt:-"-O2"}

# debug
nm_debug_opt=${nm_debug_opt:-"-Z7"}

# warnings
nm_warn_opt=${nm_warn_opt:-"-W4 -WX -nologo"}


# pic
nm_pic_opt=

obj_out="-Fo"
bin_out="-Fe"
cpp_ext=".c"
obj_ext=".obj"
mod_ext=".dll"
bin_ext=".exe"



# MSVC 6.0 SP2                            cl 12.00
# MSVC Toolkit 2003 (7.1)                 cl 13.10
# MSVC 2005 Express Edition SP1 (8.0)     cl 14.00
# MSVC 2008 Express Edition (9.0)         cl 15.00
# MSVC 2010 (10.0)                        cl 16.00
# MSVC 2015 (14.0)                        cl 19.00


NM_MSVC_VER=`$CC 2>&1 | grep 'Compiler Version' 2>&1 \
                                 | sed -e 's/^.* Version \(.*\)/\1/'`

echo " + cl version: $NM_MSVC_VER"

have=NM_COMPILER value="\"cl $NM_MSVC_VER\"" . ${NM_HOME}auto/define


nm_msvc_ver=`echo $NM_MSVC_VER | sed -e 's/^\([0-9]*\).*/\1/'`


# optimizations


# enable global optimization
#NM_CC_OPT="${NM_CC_OPT:+$NM_CC_OPT }-Og"
# enable intrinsic functions
#NM_CC_OPT="${NM_CC_OPT:+$NM_CC_OPT }-Oi"

# disable inline expansion
#NM_CC_OPT="${NM_CC_OPT:+$NM_CC_OPT }-Ob0"
# explicit inline expansion
#NM_CC_OPT="${NM_CC_OPT:+$NM_CC_OPT }-Ob1"
# explicit and implicit inline expansion
#NM_CC_OPT="${NM_CC_OPT:+$NM_CC_OPT }-Ob2"

# enable frame pointer omission
#NM_CC_OPT="${NM_CC_OPT:+$NM_CC_OPT }-Oy"
# disable stack checking calls
#NM_CC_OPT="${NM_CC_OPT:+$NM_CC_OPT }-Gs"

# pools strings as read/write
#NM_CC_OPT="${NM_CC_OPT:+$NM_CC_OPT }-Gf"
# pools strings as read-only
#NM_CC_OPT="${NM_CC_OPT:+$NM_CC_OPT }-GF"


case $CPU in
    pentium)
        # optimize for Pentium and Athlon
        CPU_OPT="-G5"
    ;;

    pentiumpro)
        # optimize for Pentium Pro, Pentium II and Pentium III
        CPU_OPT="-G6"
    ;;

    pentium4)
        # optimize for Pentium 4, MSVC 7
        CPU_OPT="-G7"
    ;;
esac

# __cdecl, default, must be used with OpenSSL, md5 asm, and sha1 asm
#CPU_OPT="${CPU_OPT:+$CPU_OPT }-Gd"
# __stdcall
#CPU_OPT="${CPU_OPT:+$CPU_OPT }-Gz"
# __fastcall
#CPU_OPT="${CPU_OPT:+$CPU_OPT }-Gr"


NM_CC_OPT="${NM_CC_OPT:+$NM_CC_OPT }$CPU_OPT"


# the link flags
CORE_LINK="$CORE_LINK -link -verbose:lib"

# link with libcmt.lib, multithreaded
LIBC="-MT"
# link with msvcrt.dll
# however, MSVC Toolkit 2003 has no MSVCRT.LIB
#LIBC="-MD"

NM_CC_OPT="${NM_CC_OPT:+$NM_CC_OPT }$LIBC"

CORE_LIBS="${CORE_LIBS:+$CORE_LIBS }kernel32.lib user32.lib"

# Win32 GUI mode application
#CORE_LINK="$CORE_LINK -subsystem:windows -entry:mainCRTStartup"


# MSVC 2005 supports C99 variadic macros
if [ "$nm_msvc_ver" -ge 14 ]; then
	have=NM_HAVE_C99_VARIADIC_MACROS . ${NM_HOME}auto/have
fi


# precompiled headers
CORE_DEPS="$CORE_DEPS $NM_OBJS/nm_config.pch"
CORE_LINK="$CORE_LINK $NM_OBJS/nm_pch.obj"
NM_PCH="$NM_OBJS/nm_config.pch"
NM_BUILD_PCH="-Ycnm_config.h -Fp$NM_OBJS/nm_config.pch"
NM_USE_PCH="-Yunm_config.h -Fp$NM_OBJS/nm_config.pch"


# the resource file
NM_RES="$NM_OBJS/nm.res"
NM_RCC="rc -fo$NM_RES \$(CORE_INCS) $NM_NT_RC"
CORE_LINK="$NM_RES $CORE_LINK"

# msvc opt

nm_long_start='@<<
	'
nm_long_end='<<'
nm_long_regex_cont=' \
	'
nm_long_cont='
	'

# preprocess
if [ ".$CPP" = "." ]; then
  # to file
	#CPP="\$(CC) -P"

  # to stdout
  CPP="\$(CC) -E"
fi
