
# msvc


NM_MSVC_VER=`$CC 2>&1 | grep 'Compiler Version' 2>&1 \
                      | sed -e 's/^.* Version \(.*\)/\1/'`

echo " + msvc version: $NM_MSVC_VER"

have=NM_COMPILER value="\"msvc $NM_MSVC_VER\"" . ${NM_HOME}auto/define

nm_msvc_ver=`echo $NM_MSVC_VER | sed -e 's/^\([0-9]*\).*/\1/'`



# preprocess
[ "." = ".$CPP" ] && CPP="\$(CC)"

# assembly
[ "." = ".$CAS" ] && CAS="\$(CC)"

# assembler
[ "." = ".$AS" ] && AS="ml"


# archive
[ "." = ".$AR" ] && AR="lib"


# optimize: -Og -Oi -Ot -Oy -Ob2 -Gs -GF -Gy
nm_optimize_opt=${nm_optimize_opt:-"-O2"}

# debug
nm_symbol_opt=${nm_symbol_opt:-"-Z7"}

# warnings
nm_warn_opt=${nm_warn_opt:-"-W4 -nologo"}

# error
nm_error_opt="-WX"

# cl has no verbose option
nm_verbose_opt=${nm_verbose_opt:-""}


# pic option
nm_pic_opt=

# output options
cpp_out=">"
asm_out="-Fa"
obj_out="-Fo"
bin_out="-Fe"
ar_out="-OUT:"

# auto object output option
auto_out=$obj_out

# extensions
cpp_ext=".c"
asm_ext=".asm"
obj_ext=".obj"
lib_ext=".dll"
bin_ext=".exe"
ar_ext=".lib"


# MSVC 6.0 SP2                            cl 12.00
# MSVC Toolkit 2003 (7.1)                 cl 13.10
# MSVC 2005 Express Edition SP1 (8.0)     cl 14.00
# MSVC 2008 Express Edition (9.0)         cl 15.00
# MSVC 2010 (10.0)                        cl 16.00
# MSVC 2015 (14.0)                        cl 19.00


# optimizations


# enable global optimization
#nm_optimize_opt="${nm_optimize_opt:+$nm_optimize_opt }-Og"

# enable intrinsic functions
#nm_optimize_opt="${nm_optimize_opt:+$nm_optimize_opt }-Oi"

# disable inline expansion
#nm_optimize_opt="${nm_optimize_opt:+$nm_optimize_opt }-Ob0"

# explicit inline expansion
#nm_optimize_opt="${nm_optimize_opt:+$nm_optimize_opt }-Ob1"

# explicit and implicit inline expansion
#nm_optimize_opt="${nm_optimize_opt:+$nm_optimize_opt }-Ob2"

# enable frame pointer omission
#nm_optimize_opt="${nm_optimize_opt:+$nm_optimize_opt }-Oy"

# disable stack checking calls
#nm_optimize_opt="${nm_optimize_opt:+$nm_optimize_opt }-Gs"

# pools strings as read/write
#nm_optimize_opt="${nm_optimize_opt:+$nm_optimize_opt }-Gf"

# pools strings as read-only
#nm_optimize_opt="${nm_optimize_opt:+$nm_optimize_opt }-GF"


case $CPU in
    pentium)
        # optimize for Pentium and Athlon
        nm_cpu_opt="-G5"
    ;;

    pentiumpro)
        # optimize for Pentium Pro, Pentium II and Pentium III
        nm_cpu_opt="-G6"
    ;;

    pentium4)
        # optimize for Pentium 4, MSVC 7
        nm_cpu_opt="-G7"
    ;;
esac


# __cdecl, default, must be used with OpenSSL, md5 asm, and sha1 asm
#nm_cpu_opt="${nm_cpu_opt:+$nm_cpu_opt }-Gd"
# __stdcall
#nm_cpu_opt="${nm_cpu_opt:+$nm_cpu_opt }-Gz"
# __fastcall
#nm_cpu_opt="${nm_cpu_opt:+$nm_cpu_opt }-Gr"


##<COMMENT: useless now>
## the link flags
#CORE_LINK="$CORE_LINK -link -verbose:lib"
#
## link with libcmt.lib, multithreaded
#LIBC="-MT"
## link with msvcrt.dll
## however, MSVC Toolkit 2003 has no MSVCRT.LIB
##LIBC="-MD"
#
#NM_CC_OPT="${NM_CC_OPT:+$NM_CC_OPT }$LIBC"
#
#CORE_LIBS="${CORE_LIBS:+$CORE_LIBS }kernel32.lib user32.lib"
#
## Win32 GUI mode application
##CORE_LINK="$CORE_LINK -subsystem:windows -entry:mainCRTStartup"
#
#
## MSVC 2005 supports C99 variadic macros
#if [ "$nm_msvc_ver" -ge 14 ]; then
#	have=NM_HAVE_C99_VARIADIC_MACROS . ${NM_HOME}auto/have
#fi
#
#
## precompiled headers
#CORE_DEPS="$CORE_DEPS $NM_OBJS/nm_config.pch"
#CORE_LINK="$CORE_LINK $NM_OBJS/nm_pch.obj"
#NM_PCH="$NM_OBJS/nm_config.pch"
#NM_BUILD_PCH="-Ycnm_config.h -Fp$NM_OBJS/nm_config.pch"
#NM_USE_PCH="-Yunm_config.h -Fp$NM_OBJS/nm_config.pch"
#
#
## the resource file
#NM_RES="$NM_OBJS/nm.res"
#NM_RCC="rc -fo$NM_RES \$(CORE_INCS) $NM_NT_RC"
#CORE_LINK="$NM_RES $CORE_LINK"


# msvc opt
nm_long_start='@<<
	'
nm_long_end='<<'
nm_long_regex_cont=' \
	'
nm_long_cont='
	'

# stage
nm_stage_pre="-E"
nm_stage_asm="-c"
nm_stage_c="-c"
