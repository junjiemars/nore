#### -*- mode:sh -*- vim:ft=sh
####
## No More than a C build system for clang, gcc and msvc.
## https://github.com/junjiemars/nore
####
## cc/msvc
####


nm_msvc_ver=`$CC 2>&1 | grep 'Compiler Version' 2>&1 \
                      | sed -e 's/^.* Version \(.*\)/\1/'`

echo " + msvc version: $nm_msvc_ver"

NM_COMPILER="msvc $nm_msvc_ver"
have=NM_COMPILER value="\"$NM_COMPILER\"" . ${NORE_ROOT}/auto/define

. ${NORE_ROOT}/auto/cc/version
CC_VER=`version_n $(echo $nm_msvc_ver | cut -d' ' -f1)`
have=MSVC value=$CC_VER . ${NORE_ROOT}/auto/define


# compiler 
[ "." = ".$CC" ] && CC="cl"

# preprocess
[ "." = ".$CPP" ] && CPP="\$(CC)"

# assembler
[ "." = ".$AS" ] && AS="ml"

# archive
[ "." = ".$AR" ] && AR="lib"


# output options
cpp_out=">"
asm_out="-FAu -Fa"
obj_out="-Fo"
bin_out="-Fe"
ar_out="-out:"

# auto object output option
auto_out=$obj_out

# extensions
cpp_ext=".c"
asm_ext=".asm"
obj_ext=".obj"
bin_ext=".exe"
ar_ext=".lib"

# stage
nm_stage_pre="-E"
nm_stage_asm="-c"
nm_stage_c="-c"


# error
case "$NM_ERROR" in
	NO) nm_error_opt="" ;;
	YES) nm_error_opt="-WX" ;;
esac

# warnings (-Wall)
case "$NM_WARN" in
	NO) nm_warn_opt="" ;;
	YES) nm_warn_opt="-W4" ;;
	*) nm_warn_opt="$NM_WARN" ;;
esac

# verbose
case "$NM_VERBOSE" in
	NO)
		CC="${CC:+$CC }-nologo"
		if [ ".$CXX" = ".$CC" ]; then
			CXX="${CXX:+$CXX }-nologo"
		fi
		AR="${AR:+$AR }-nologo"
		AS="${AS:+$AS }-nologo"
		;;
	YES) ;;
esac

# symbol
case "$NM_SYMBOL" in
	NO) nm_symbol_opt="" ;;
	YES) nm_symbol_opt="-Z7" ;;
	*) nm_symbol_opt="$NM_SYMBOL" ;;
esac

# arch
case "$NM_ARCH" in
	NO) nm_arch_opt="" ;;
	YES) nm_arch_opt="" ;;
	*)
		# -arch:xxx
		nm_arch_opt="$NM_ARCH"
		;;
esac

# std
case "$NM_STD" in
	NO) nm_std_opt="" ;;
	YES)
		#https://herbsutter.com/2012/05/03/reader-qa-what-about-vc-and-c99/
  	;; 
	*)
		# for c90: -Za
		# for c++14 or later: -std:c++14, -std:latest
		nm_std_opt="${NM_STD}"
		;;
esac

# optimize
# see also: https://docs.microsoft.com/en-us/cpp/build/reference/compiler-options-listed-by-category?view=vs-2017
case ".$NM_OPTIMIZE" in
	.NO)  nm_optimize_opt="-Od" ;;
	.YES) nm_optimize_opt="-O2" ;;
esac

# unicode
nm_utf_opt="-utf-8"

# trigraph
nm_trigraph_opt="-Zc:trigraphs"

# flag
nm_flag_opt=

# model
nm_model_opt="-EHsc"

# link option
LDFLAGS="-link -libpath:${NM_OUT}/lib${LDFLAGS:+ $LDFLAGS}"


# eof
