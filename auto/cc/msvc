#### -*- mode:sh -*- vim:ft=sh
#------------------------------------------------
# target: cc/msvc for msvc compiler
# url: https://github.com/junjiemars/nore.git
# author: Junjie Mars
#------------------------------------------------

nm_msvc_ver=`$CC 2>&1 | grep 'Compiler Version' 2>&1 \
                      | sed -e 's/^.* Version \(.*\)/\1/'`

echo " + msvc version: $nm_msvc_ver"

NM_COMPILER="msvc $nm_msvc_ver"
have=NM_COMPILER value="\"$NM_COMPILER\"" . ${NORE_ROOT}/auto/define

. ${NORE_ROOT}/auto/cc/version
CC_VER=`version_n $(echo $nm_msvc_ver | cut -d' ' -f1)`
have=MSVC value=$CC_VER . ${NORE_ROOT}/auto/define


# compiler
[ "." = ".$CC" ] && CC="cl"

# preprocess
[ "." = ".$CPP" ] && CPP="\$(CC)"

# assembler
[ "." = ".$AS" ] && AS="ml"

# linker
[ "." = ".$LD" ] && LD="link"

# archive
[ "." = ".$AR" ] && AR="lib"


# output options
cpp_out=">"
asm_out="-FAu -Fa"
obj_out="-Fo"
bin_out="-Fe"
ar_out="-out:"

# auto object output option
auto_out=$obj_out

# extensions
cpp_ext=".c"
asm_ext=".asm"
obj_ext=".obj"
bin_ext=".exe"
ar_ext=".lib"

# stage
nm_stage_pre="-E"
nm_stage_asm="-c"
nm_stage_c="-c"


# error
case "$NM_ERROR" in
  NO) nm_error_opt="" ;;
  YES) nm_error_opt="-WX" ;;
esac

# warnings (-Wall)
case "$NM_WARN" in
  NO) nm_warn_opt="" ;;
  YES) nm_warn_opt="-W4" ;;
  *) nm_warn_opt="$NM_WARN" ;;
esac

# verbose
case "$NM_VERBOSE" in
  NO)
    CC="${CC:+$CC }-nologo"
    if [ "$CXX" = "$CC" ]; then
      CXX="${CXX:+$CXX }-nologo"
    fi
    AR="${AR:+$AR }-nologo"
    AS="${AS:+$AS }-nologo"
    ;;
  YES) ;;
esac

# release option
# linker option @ tail: verfied checksum
nm_release_opt="-release"

# symbol
case "$NM_SYMBOL" in
  NO) nm_symbol_opt="" ;;
  YES) nm_symbol_opt="-Z7" ;;
  *) nm_symbol_opt="$NM_SYMBOL" ;;
esac

# arch
case "$NM_ARCH" in
  NO) nm_arch_opt="" ;;
  YES) nm_arch_opt="" ;;
  *)
    # -arch:xxx
    nm_arch_opt="$NM_ARCH"
    ;;
esac

# std
case "$NM_STD" in
  NO) nm_std_opt="" ;;
  YES)
    #https://herbsutter.com/2012/05/03/reader-qa-what-about-vc-and-c99/
    nm_std_opt="-std:c11"
    ;;
  *)
    # for c90: -Za
    # for c11 or later: -std:c11, -std:c17, -std:latest
    nm_std_opt="${NM_STD}"
    ;;
esac

# optimize
# see also: https://docs.microsoft.com/en-us/cpp/build/reference/compiler-options-listed-by-category?view=vs-2017
case "$NM_OPTIMIZE" in
  NO) nm_optimize_opt="-Od" ;;
  YES) nm_optimize_opt="-O2" ;;
  *) nm_optimize_opt="$NM_OPTIMIZE" ;;
esac

# model
nm_model_opt="-EHsc"

# unicode
nm_utf_opt="-utf-8"

# trigraphs
nm_trigraphs_opt="-Zc:trigraphs"

# openmp
nm_openmp_opt="-openmp"

# lib
nm_libdir_opt="-libpath:"
nm_lib_opt=

# link option @ tail
nm_link_opt="-link"

LDFLAGS="${nm_link_opt} ${nm_libdir_opt}${NM_OUT}/lib${LDFLAGS:+ $LDFLAGS}"

# ld option
nm_ld_entry_opt="-entry"
nm_ld_lib_opt=
nm_ld_libdir_opt="-libpath:"
nm_ld_out_opt="-out"

# eof
