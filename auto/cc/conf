#### -*- mode:sh -*- vim:ft=sh
####
## No More than a C build system for clang, gcc and msvc.
## https://github.com/junjiemars/nore
####
## cc/conf
####


CC=${CC:-cc}
CXX=
LINK="\$(CC)"

# c preprocessor
CPP=${CPP}
# extra flags to give the c preprocessor
CPPFLAGS=${CPPFLAGS}

# assembler
AS=${AS}
# extra flags to give to the assembler
ASFLAGS=${ASFLAGS}

# archiver
AR=${AR}
# extra flags to give to the archiver
ARFLAGS=${ARFLAGS}

# extra flags to give to the c compiler
CFLAGS=${CFLAGS}
# extra flags to give to the c++ compiler
CXXFLAGS=

INC=${INC}

# extra flags to give to compilers when they are supported to invoke
# the linker, such as -L
LDFLAGS=${LDFLAGS}

# library flags or names given to compilers when they are supported to
# invoke the linker, such as -l
LDLIBS=${LDLIBS}

# extra flags to give to Lex
LFLAGS=${LFLAGS}
# extra flags to give to Yacc
YFLAGS=${YFLAGS}

# command line option
nm_symbol_opt=
nm_debug_opt=
nm_release_opt=
nm_warn_opt=
nm_error_opt=
nm_optimize_opt=
nm_std_opt=
nm_arch_opt=
nm_verbose_opt=

nm_model_opt=
nm_shared_opt=

# feature
nm_utf_opt=
nm_trigraph_opt=
nm_openmp_opt=

# stage
nm_stage_pre=
nm_stage_chk=
nm_stage_asm=
nm_stage_c=

# macro define
nm_def_opt=-D
nm_undef_opt=-U

# lib
nm_libdir_opt=
nm_lib_opt=

# link
nm_link_opt=

# path separator
nm_p=":"

obj_out="-o "
bin_out="-o "
cpp_out="-o "
asm_out="-o "
ar_out="rcs "

obj_ext=".o"
bin_ext=
cpp_ext=".i"
asm_ext=".s"
ar_ext=".a"


. ${NORE_ROOT}/auto/cc/name


case "$CC_NAME" in
  gcc) . ${NORE_ROOT}/auto/cc/gcc ;;
  clang) . ${NORE_ROOT}/auto/cc/clang ;;
  msvc) . ${NORE_ROOT}/auto/cc/msvc ;;
esac


# error option
if [ -n "$nm_error_opt" ]; then
	CFLAGS=${CFLAGS:+$CFLAGS }${nm_error_opt}
fi

# warn option
if [ -n "$nm_warn_opt" ]; then
	CFLAGS=${CFLAGS:+$CFLAGS }${nm_warn_opt}
fi

# verbose option
if [ -n "$nm_verbose_opt" ]; then
	CFLAGS=${CFLAGS:+$CFLAGS }${nm_verbose_opt}
fi

# debug option
case "$NM_DEBUG" in
	NO)
		nm_debug_opt='-DNDEBUG=1'
		CFLAGS=${CFLAGS:+$CFLAGS }${nm_debug_opt}
		;;
	YES) nm_debug_opt="" ;;
esac

# symbol option
if [ -n "$nm_symbol_opt" ]; then
	CFLAGS=${CFLAGS:+$CFLAGS }${nm_symbol_opt}
fi

# arch option
if [ -n "$nm_arch_opt" ]; then
	CFLAGS=${CFLAGS:+$CFLAGS }${nm_arch_opt}
fi

# std option
if [ -n "$nm_std_opt" ]; then
	CFLAGS=${CFLAGS:+$CFLAGS }${nm_std_opt}
fi

# optimize option
if [ -n "$nm_optimize_opt" ]; then
	CFLAGS=${CFLAGS:+$CFLAGS }${nm_optimize_opt}
fi

# unicode option
if [ -n "$nm_utf_opt" ]; then
	CFLAGS=${CFLAGS:+$CFLAGS }${nm_utf_opt}
	CPPFLAGS=${CPPFLAGS:+$CPPFLAGS }${nm_utf_opt}
fi

# model option
if [ -n "$nm_model_opt" ]; then
	CFLAGS=${CFLAGS:+$CFLAGS }${nm_model_opt}
fi

# cxx flags
if [ "$CXX" = "$CC" ]; then
	CXXFLAGS=$CFLAGS
fi

# inc option
INC="-I${NM_OUT} -I${NM_OUT}/inc${INC:+ $INC}"


# link option


# eof

