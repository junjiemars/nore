#### -*- mode:sh -*- vim:ft=sh
####
## No More than a C build system for clang, gcc and msvc.
## https://github.com/junjiemars/nore
####
## cc/conf
####


CC=${CC:-cc}
CXX=

CPP=
CAS=

AS=${AS}
AR=
LINK="\$(CC)"

CFLAGS=
CXXFLAGS=

ASFLAGS=
LDFLAGS=
ARFLAGS=
LFLAGS=
YFLAGS=

INC=
LDLIBS=

nm_symbol_opt=
nm_debug_opt=
nm_warn_opt=
nm_error_opt=
nm_optimize_opt=
nm_std_opt=
nm_cpu_opt=
nm_utf_opt=
nm_verbose_opt=

nm_shared_opt=

nm_stage_pre=
nm_stage_chk=
nm_stage_asm=
nm_stage_c=

nm_def_opt=-D
nm_undef_opt=-U

nm_p=":"

obj_out="-o "
bin_out="-o "
cpp_out="-o "
asm_out="-o "
ar_out="rcs "

obj_ext=".o"
bin_ext=
cpp_ext=".i"
asm_ext=".s"
ar_ext=".a"


. ${NORE_ROOT}/auto/cc/name


case "$CC_NAME" in
  gcc)
    . ${NORE_ROOT}/auto/cc/gcc
  ;;

  clang)
    . ${NORE_ROOT}/auto/cc/clang
  ;;

  msvc*)
    . ${NORE_ROOT}/auto/cc/msvc
	;;
esac


# symbol option
if [ "$NM_SYMBOL" = "YES" -a -n "$nm_symbol_opt" ]; then
	CFLAGS=${CFLAGS:+$CFLAGS }${nm_symbol_opt}
fi

# optimize option
case ".$NM_OPTIMIZE" in
	.|.NO)
	;;

	.YES)
		if [ -n "$nm_optimize_opt" ]; then
			CFLAGS=${CFLAGS:+$CFLAGS }${nm_optimize_opt}
		fi
	;;

	*)
		CFLAGS=${CFLAGS:+$CFLAGS }${NM_OPTIMIZE}
	;;

esac

# warn option
case ".$NM_WARN" in
	.|.NO)
	;;

	.YES)
		if [ -n "$nm_warn_opt" ]; then
			CFLAGS=${CFLAGS:+$CFLAGS }${nm_warn_opt}			
		fi
	;;

	*)
		CFLAGS=${CFLAGS:+$CFLAGS }${NM_WARN}
	;;

esac

# error option
if [ "$NM_ERROR" = "YES" -a "$NM_WARN" != "NO" ]; then
	CFLAGS=${CFLAGS:+$CFLAGS }${nm_error_opt}
fi

# debug option
if [ "$NM_DEBUG" = "NO" ]; then
	nm_debug_opt='-DNDEBUG=1'
	CFLAGS=${CFLAGS:+$CFLAGS }${nm_debug_opt}
fi

# unicode option
if [ -n "$nm_utf_opt" ]; then
	CFLAGS=${CFLAGS:+$CFLAGS }${nm_utf_opt}
	CPPFLAGS=${CPPFLAGS:+$CPPFLAGS }${nm_utf_opt}
fi

# verbose option
if [ "$NM_VERBOSE" = "YES" -a -n "$nm_verbose_opt" ]; then
	CFLAGS=${CFLAGS:+$CFLAGS }${nm_verbose_opt}
fi

# cxx flags
if [ ".$CXX" = ".$CC" ]; then
	CXXFLAGS=$CFLAGS
fi

# link option
LDFLAGS=${LDFLAGS}


