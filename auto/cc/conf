
# cc/conf

CC=${CC:-cc}

CPP=
CAS=

AS=${AS}
AR=
LINK="\$(CC)"

CFLAGS=
ASFLAGS=
LDFLAGS=
ARFLAGS=
LFLAGS=
YFLAGS=

INC=
LDLIBS=

nm_symbol_opt=
nm_debug_opt=
nm_warn_opt=
nm_error_opt=
nm_optimize_opt=
nm_std_opt=
nm_cpu_opt=
nm_utf_opt=
nm_verbose_opt=

nm_shared_opt=

nm_stage_pre=
nm_stage_chk=
nm_stage_asm=
nm_stage_c=

nm_def_opt=-D
nm_undef_opt=-U

nm_p=":"

obj_out="-o "
bin_out="-o "
cpp_out="-o "
asm_out="-o "
ar_out="rcs "

obj_ext=".o"
bin_ext=
cpp_ext=".i"
asm_ext=".s"
lib_ext=".so"
ar_ext=".a"


. ${NM_HOME}auto/cc/name


case $CC_NAME in
  gcc)
    . ${NM_HOME}auto/cc/gcc
  ;;

  clang)
    . ${NM_HOME}auto/cc/clang
  ;;

  msvc*)
    . ${NM_HOME}auto/cc/msvc
	;;
esac


# symbol option
if [ "$NM_SYMBOL" = "YES" ]; then
	CFLAGS=${CFLAGS:+$CFLAGS}${nm_symbol_opt:+ $nm_symbol_opt}
fi

# optimize option
case "$NM_OPTIMIZE" in
	YES)
		CFLAGS=${CFLAGS:+$CFLAGS}${nm_optimize_opt:+ $nm_optimize_opt}
	;;

	NO)
	;;

	*)
		CFLAGS=${CFLAGS:+$CFLAGS}${NM_OPTIMIZE:+ $NM_OPTIMIZE}
	;;

esac

# warn option
case "$NM_WARN" in
	YES)
		CFLAGS=${CFLAGS:+$CFLAGS}${nm_warn_opt:+ $nm_warn_opt}
	;;

	NO)
	;;

	*)
		CFLAGS=${CFLAGS:+$CFLAGS}${NM_WARN:+ $NM_WARN}
	;;

esac

# error option
if [ "$NM_ERROR" = "YES" -a "$NM_WARN" != "NO" ]; then
	CFLAGS=${CFLAGS:+$CFLAGS}${nm_error_opt:+ $nm_error_opt}
fi

# debug option
if [ "$NM_DEBUG" = "NO" ]; then
	nm_debug_opt='-DNDEBUG=1'
	CFLAGS=${CFLAGS:+$CFLAGS}${nm_debug_opt:+ $nm_debug_opt}
fi

# unicode option
if [ -n "$nm_utf_opt" ]; then
	CFLAGS=${CFLAGS:+$CFLAGS}${nm_utf_opt:+ $nm_utf_opt}
fi

# verbose option
if [ "$NM_VERBOSE" = "YES" ]; then
	CFLAGS=${CFLAGS:+$CFLAGS}${nm_verbose_opt:+ $nm_verbose_opt}
fi

# link option
LDFLAGS=${LDFLAGS}


