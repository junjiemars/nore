#!/bin/sh

_ROOT_DIR_="`cd -- $(dirname -- $0) && pwd`"
_CI_DIR_="${_ROOT_DIR_%/}/ci"
_OS_NAME_="`uname -s 2>/dev/null`"
_WIN_ENV_=
_TRACE_="${_TRACE_}"

case "${_OS_NAME_}" in
  MSYS_NT-*|MINGW??_NT-*) _OS_NAME_="WinNT" ;;
esac

CC="${CC}"
if [ -z "$CC" ]; then
  case `uname -s 2>/dev/null` in
    Darwin)                 CC="clang" ;;
    Linux)                  CC="gcc"   ;;
    WinNT)                  CC="cl"    ;;
  esac
fi

make_ci_env () {
  if [ -d "$_CI_DIR_" ]; then
		rm -r "${_CI_DIR_}"
	fi
	mkdir -p "$_CI_DIR_"

  echo "------------"
  echo "CC=$CC"
  echo "_ROOT_DIR_=$_ROOT_DIR_"
  echo "_CI_DIR_=$_CI_DIR_"
  echo "------------"

  if [ ! -f "${_ROOT_DIR_%/}/bootstrap.sh" ]; then
    echo "!panic: ${_ROOT_DIR_%/}/bootstrap.sh no found"
    exit 1
  fi
  cd "${_CI_DIR_}"
  ${_ROOT_DIR_%/}/bootstrap.sh

  if [ "WinNT" = "${_OS_NAME_}" -a "cl" = "${CC}" ]; then
    if [ ! -f "${HOME}/.nore/cc-env.sh" ]; then
      echo "!panic: ${HOME}/.nore/cc-env.sh no found"
      exit 1
    fi
    ${HOME}/.nore/cc-env.sh

    if [ ! -f "${HOME}/.nore/cc-env.bat" ]; then
      echo "!panic: ${HOME}/.nore/cc-env.bat no found"
      exit 1
    fi
    _WIN_ENV_="${HOME}/.nore/cc-env.bat"
  fi
}

echo_ci_what () {
	echo "------------"
	echo "# $@ ..."
	echo "------------"
}

test_do () {
	local msvc_bat="msvc.bat"

  cd "$_CI_DIR_"
  if [ -z "${_WIN_ENV_}" ]; then
    ./configure ${_TRACE_} $@
    make clean test
  else
		cat << END > "${msvc_bat}"
@if not "%VSCMD_DEBUG%" GEQ "3" echo off
REM generated by Nore (https://github.com/junjiemars/nore)
call "%1"
bash "%2"
"%3"
END
		if [ ! -f "${msvc_bat}" ]; then
			echo "!panic: generate msvc.bat failed"
			exit 1
		fi
		chmod u+x ${msvc_bat}
		./${msvc_bat} "${_WIN_ENV_}" "./configure ${_TRACE_} $@" "make clean test"
  fi
}

test_nore_new_option () {
  make_ci_env
	echo_ci_what "CC=$CC ./configure --new"

  test_do --new
}

test_nore_symbol_option () {
  local c="`basename $_CI_DIR_`.c"
  make_ci_env
  echo_ci_what "CC=$CC ./configure --symbol-table=sym --new"

  test_do --symbol-table=sym --new

  cat <<END > "$c"
#include <nore.h>
#include <stdio.h>

#define _unused_(x) ((void)(x))

int main(int argc, char **argv) {
    _unused_(argc);
    _unused_(argv);
#if __DARWIN__
    printf("Hello, Darwin!\n");
#elif __LINUX__
    printf("Hello, Linux!\n");
#elif __WINNT__
    printf("Hello, WinNT!\n");
#else
    printf("!panic, unknown OS\n");
#endif
    return 0;
}

END

  case "$_OS_NAME_" in
    Darwin)
      sed "s/DARWIN:DARWIN/DARWIN:__DARWIN__/g" sym > sym1 2>/dev/null
      ;;
    Linux)
      sed "s/LINUX:LINUX/LINUX:__LINUX__/g" sym > sym1 2>/dev/null
      ;;
    WinNT)
      sed "s/WINNT:WINNT/WINNT:__WINNT__/g" sym > sym1 2>/dev/null
      ;;
  esac
  
  test_do --symbol-table=sym1
}

test_nore_optimize_option () {
  make_ci_env
  echo_ci_what "CC=$CC ./configure --new"

  test_do --new

	echo_ci_what "CC=$CC ./configure --with-optimize=no"
  test_do --with-optimize=no

	echo_ci_what "CC=$CC ./configure --with-optimize=yes"
  test_do --with-optimize=yes

  echo_ci_what "CC=$CC ./configure --with-optimize="
  test_do --with-optimize=no
}

# test
test_nore_new_option
test_nore_symbol_option
test_nore_optimize_option

# clean CI directory
[ -d "${_CI_DIR_}" ] && rm -r "${_CI_DIR_}"


# eof
