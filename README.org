#+TITLE: Nore
#+AUTHOR: Junjie Mars
#+STARTUP: overview

[[https://api.travis-ci.org/junjiemars/nore][https://api.travis-ci.org/junjiemars/nore.svg?branch=master]]


No More than a C build system for [[https://clang.llvm.org][clang]], [[https://gcc.gnu.org][gcc]] and [[https://www.visualstudio.com/vs/cplusplus/][msvc]].

Let's start ...

#+BEGIN_SRC sh
    # make a new directory as the root of your C application
    $ make your-c-app-dir
    $ cd your-c-app-dir

    # run bootstrap from github, it will generate a configure file in current directory
    $ bash <(curl https://raw.githubusercontent.com/junjiemars/nore/master/bootstrap.sh)

    # generate a C application skeleton
    $ ./configure --new

		# configure the skeleton that previous generated
    $ ./configure

		# build and test
    $ make test
#+END_SRC

* Story

Why we need another C build system?

Frequently, I want to know how things works in machine level, so I need
to try something in C on popular platforms, but sadly, there are no
handy weapons to do that.

I known there are already aswsome tools existing, but the key question
is how to easy build C code in varied OS by varied Compilers, among
those things I just pick the most critical ones: *Make* and *Shell*.

So the story begins ... 
- Keep things simple: classic workflow (configure, make and make install).
- Write, Build, Test and Run code on anywhere: Linux, Darwin, Windows or Docker.
- Easy to try some new ideas but have no more unnecessary.

* Cooking

-  [[#configuration][Configuration]]
-  [[#getting-started][Getting Started]]
-  [[#feature-testing][Feature Testing]]
-  [[#tips][Tips]]

** Configuration
	 :PROPERTIES:
	 :CUSTOM_ID: configuration
	 :END:

*** On Unix-like Platform
		:PROPERTIES:
		:CUSTOM_ID: on-unix-like-platform
		:END:

There are no installation process just setup *bash* and *make* environment.

The most simplest way to configure is go into your *C* application
directory and run:

#+BEGIN_SRC sh
    $ bash <(curl https://raw.githubusercontent.com/junjiemars/nore/master/bootstrap.sh)

    configure Nore on Linux ...

     + checking make ... found
     + checking nore ... found
     + generating configure ... ok
     + generating ~/.cc-env.sh ... ok

    ... elpased 0 seconds.
#+END_SRC

*** On Windows Platform
		:PROPERTIES:
		:CUSTOM_ID: on-windows-platform
		:END:

On Windows, because there are no *bash* by default, so we need to
install one, [[https://git-scm.com/downloads][Git Bash]] easy to install
and use. In the installation of /Git Bash/, select /unix compatible
tools/ option box. Run =bash= in any =CMD= or =Git Bash=, then run:

#+BEGIN_SRC sh
    $ bash <(curl https://raw.githubusercontent.com/junjiemars/nore/master/bootstrap.sh)

    configure Nore on MINGW64_NT-10.0 ...

     + checking make ... no found
     + checking bash environment ... found
     + installing make ... ok
     + checking nore ... found
     + generating configure ... ok
     + generating ~/.cc-env.sh ... ok

    ... elpased 9 seconds.

    # generate ~/.cc-env.bat for MSVC environment
    $ ~/.cc-env.sh
#+END_SRC

If want to use Windows C/C++ toolchains, you need to install
[[https://developer.microsoft.com/en-US/windows/downloads/windows-10-sdk][Windows SDK]] + [[http://landinghub.visualstudio.com/visual-cpp-build-tools][C/C++ Build Tools]].


/screenshots/:
- [[https://github.com/junjiemars/images/blob/master/nore/bootstrap-on-windows.png][bootstrap on Windows]]

*** From Edge Branch
		:PROPERTIES:
		:CUSTOM_ID: from-edge-branch
		:END:

If you want to try new features of Nore, try the =edge= branch.

#+BEGIN_SRC sh
    $ curl https://raw.githubusercontent.com/junjiemars/nore/edge/bootstrap.sh | bash -s -- --branch=edge
#+END_SRC

** Getting Started
	 :PROPERTIES:
	 :CUSTOM_ID: getting-started
	 :END:

#+BEGIN_SRC sh
    $ ./configure --help
#+END_SRC

On Windows, if using *MSVC* environment, we need host *MSVC* environment first.

#+BEGIN_SRC sh
    # switch to Command Prompt
    $ cmd

    # host MSVC environment
    > %userprofile%/.cc-env.bat

    # switch back to SHELL
    > bash
#+END_SRC

/screenshots/:
- [[https://github.com/junjiemars/images/blob/master/nore/host-msvc-env-on-windows.png][host msvc environment]]

*** New a Skeleton
		:PROPERTIES:
		:CUSTOM_ID: new-a-skeleton
		:END:

Using *--new* option to make a testable skeleton, you can easy to try
some new idea from scratch. Don't warry, it is the same processing on Windows, Darwin and Linux.

#+BEGIN_SRC sh
    # generate a new project's skeleton
    $ ./configure --new

    checking for OS
     + MINGW64_NT-10.0 2.9.0(0.318/5/3) x86_64
    checking for C compiler ... found
     + using Microsoft Visual C++ compiler
     + msvc version: 19.13.26129 for x64
    checking for WinNT:10.0:x86_64 specific features

    creating out/Makefile
     + generating src directory ... ok
     + generating src/version file ... ok
     + generating src/configure file ... ok
     + generating src/Makefile file ... ok

    Configuration summary
      platform: WinNT:10.0:x86_64
      compiler: msvc 19.13.26129 for x64
      prefix= D:/opt/run
      out= out
      new= YES
      std= YES:
      symbol= YES: -Z7
      debug= YES
      optimize= NO
      cpu= NO
      error= YES: -WX
      warn= YES: -W4
      verbose= NO
      has= .

    # after --new a skeleton, configure skeleton and make
    $ ./configure
    $ make clean test
#+END_SRC

/screenshots/:
- [[https://github.com/junjiemars/images/blob/master/nore/new-skeleton-msvc.png][new skeleton msvc]]
- [[https://github.com/junjiemars/images/blob/master/nore/new-skeleton-clang.png][new skeleton clang]]

*** Configure existing one
		:PROPERTIES:
		:CUSTOM_ID: configure-existing-one
		:END:

For existing C project

#+BEGIN_SRC sh
    $ cd <existing-c-project-root>

    $ ./configure --src-dir=<source-directory>
#+END_SRC

*** Build and Test
		:PROPERTIES:
		:CUSTOM_ID: build-and-test
		:END:

#+BEGIN_SRC sh
    $ ./configure

    $ make

    $ make test
#+END_SRC

Following the prompt of *configure* and *make*, change the /options/ of
*configure* or modify /src/Makefile/.

*** Multiple Targets
		:PROPERTIES:
		:CUSTOM_ID: multiple-targets
		:END:

Suppose project /P/ has /A/ and /B/ two targets, one is a /Executable/, the
other is a /Library/

#+BEGIN_SRC sh
    $ ./configure --has-A --has-B
#+END_SRC

*** Multiple Projects
		:PROPERTIES:
		:CUSTOM_ID: multiple-projects
		:END:

All projects can use only one Nore.

Suppose there are /A/, /B/ and /C/ projects, those projects use one Nore
clone.

#+BEGIN_SRC sh
    # clone Nore in a directory, annoted as <Nore>

    # in A project directory:
    $ cd <A>
    $ <Nore>/bootstrap.sh

    # in B project directory:
    $ cd <B>
    $ <Nore>/bootstrap.sh

    # in C project directory:
    $ cd <C>
    $ <Nore>/bootstrap.sh
#+END_SRC

*** Symbol Table
		:PROPERTIES:
		:CUSTOM_ID: symbol-table
		:END:

Nore's builtin exportable symbols can be replaced via *--symbol-table* option,
which let Nore easy to port to existing C projects.

Example: some tools annote =DARWIN= in C source code or make file as
=__DARWIN__= , but the default in Nore is =DARWIN=, you can change that
to =__DARWIN__=.

#+BEGIN_SRC sh
    $ ./configure --symbol-table=<symbol-table-file-name-your-favor>

    # if <symbol-table-file-name-your-favor> does not existing, 
    # Nore will dump the symbol table into it. Otherwise, Nore will import 
    # <symbol-table-file-name-your-favor>

    # change the <symbol-table-file-name-your-favor> then
    #
    $ ./configure --symbol-table=<symbol-table-file-name-your-favor> --has-<A>
    $ make clean test
#+END_SRC

** Feature Testing
	 :PROPERTIES:
	 :CUSTOM_ID: feature-testing
	 :END:

Write a /bash/ script named /configure/ and put it into *--src-dir* directory.

*** Header File Exists Testing
		:PROPERTIES:
		:CUSTOM_ID: header-file-exists-testing
		:END:

#+BEGIN_SRC sh
    # check header file exiting
    #----------------------------------------
    echo " + checking C99 header files ..."
    nm_include="complex.h" . ${NORE_ROOT}/auto/include
    nm_include="fenv.h" . ${NORE_ROOT}/auto/include
    nm_include="inttypes.h" . ${NORE_ROOT}/auto/include
    nm_include="stdint.h" . ${NORE_ROOT}/auto/include
    nm_include="tgmath.h" . ${NORE_ROOT}/auto/include
#+END_SRC

*** Machine Feature Testing
		:PROPERTIES:
		:CUSTOM_ID: machine-feature-testing
		:END:

#+BEGIN_SRC sh
    # check features
    #----------------------------------------
    nm_feature="endian"
    nm_feature_name="nm_have_little_endian"
    nm_feature_run=value
    nm_feature_h="#include <stdio.h>"
    nm_feature_flags=
    nm_feature_inc=
    nm_feature_ldlibs=
    nm_feature_test='int i=0x11223344;
                     char *p = (char *)&i;
                     int le = (0x44 == *p);
                     printf("%d", le);'
    . ${NORE_ROOT}/auto/feature
#+END_SRC

*** Compiler Switch Testing
		:PROPERTIES:
		:CUSTOM_ID: compiler-switch-testing
		:END:

#+BEGIN_SRC sh
    # check features based on Compiler
    #----------------------------------------
    case $CC_NAME in
        clang)
            ;;
        gcc)
            nm_feature="$CC_NAME -Wl,-E|--export-dynamic"
            nm_feature_name=
            nm_feature_run=no
            nm_feature_h=
            nm_feature_flags=-Wl,-E
            nm_feature_inc=
            nm_feature_ldlibs=
            nm_feature_test=
            . ${NORE_ROOT}/auto/feature

            if [ yes = $nm_found ]; then
                flag=LDFLAGS op="+=" value=$nm_feature_flags . ${NORE_ROOT}/auto/make_define
            fi
            ;;
        msvc)
            ;;
    esac
#+END_SRC

*** OS Feature Testing
		:PROPERTIES:
		:CUSTOM_ID: os-feature-testing
		:END:

#+BEGIN_SRC sh
    # check features based on OS
    #----------------------------------------
    case $NM_SYSTEM in
        Darwin)
            nm_feature="libuv"
            nm_feature_name="nm_have_uv_h"
            nm_feature_run=no
            nm_feature_h="#include <uv.h>"
            nm_feature_flags=-L/opt/local/lib
            nm_feature_inc=-I/opt/local/include
            nm_feature_ldlibs=-luv
            nm_feature_test=
            . ${NORE_ROOT}/auto/feature
          ;;
        Linux)
          ;;
        WinNT)
          ;;
        *)
          ;;
    esac
#+END_SRC

** Tips
	 :PROPERTIES:
	 :CUSTOM_ID: tips
	 :END:

*** Nore's Commands
		:PROPERTIES:
		:CUSTOM_ID: nores-commands
		:END:

-  =where=: Nore will generate some auxiliary files, you can find those
   files via *where* command.

#+BEGIN_SRC sh
    $ ./configure where
#+END_SRC

-  =upgrade=: Upgrade current Nore.

#+BEGIN_SRC sh
    # in your C application directory
    #
    $ ./configure upgrade
#+END_SRC

*** Code Editor
		:PROPERTIES:
		:CUSTOM_ID: code-editor
		:END:

****  Vim

On any platform, don't warry about C include path.

****  Emacs

On any Unix-like platform.

on Window,

- @@html:<kbd>@@shell-command: %userprofile%/.cc-env.bat && bash <your-c-app-dir>/configure --has-x@@html:</kbd>@@

- @@html:<kbd>@@compile: %userprofile%/.cc-env.bat && make -C <your-c-app-dir> clean test@@html:</kbd>@@

****  Visual Stduio Code

*** Debugger
		:PROPERTIES:
		:CUSTOM_ID: debugger
		:END:

**** LLDB
***** Help
***** Environment Variable
***** Load Executable

**** GDB
***** Help
***** Environment Variable
***** Load Executable

**** CDB
***** Help
- =?= displays a list of all commands and operators.
- =!help= displays help text that describes the extension commands exported from the extension DLL.
- =.help= displays a list of all meta-commands.

***** Environment Variable
- =!envvar= displays the value of the specified environment variable, such as =!envvar USERPROFILE=.

***** Load Executable

*** Object Dump
		:PROPERTIES:
		:CUSTOM_ID: object-dump
		:END:

**** otool
=otool -L <executable>=

**** objdump

**** dumpbin
=dumpbin -dependents <executable>=

* Troubleshoting
		:PROPERTIES:
		:CUSTOM_ID: troubleshoting
		:END:

Troubleshotting is more easier than other ones, because all just
Makefile and shell scripts. And Nore provides a command for debugging
purpose.

#+BEGIN_SRC sh
    # debug command for debugging Nore's shell script
    #
    $ ./configure debug

    # make debugging options: --just-print --print-data-base --warn-undefined-variables
    #
    $ make --just-print
#+END_SRC
